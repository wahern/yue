# Copyright 2017 Cheng Zhao. All rights reserved.
# Use of this source code is governed by the license that can be found in the
# LICENSE file.

import("//build/compiled_action.gni")
import("//build/config/arm.gni")

config("luajit_config") {
  defines = []

  if (target_cpu == "x64") {
    defines += [ "LUAJIT_TARGET=LUAJIT_ARCH_X64" ]
  } else if (target_cpu == "x86") {
    defines += [ "LUAJIT_TARGET=LUAJIT_ARCH_X86" ]
  } else if (target_cpu == "arm") {
    defines += [ "LUAJIT_TARGET=LUAJIT_ARCH_ARM" ]
  } else if (target_cpu == "arm64") {
    defines += [ "LUAJIT_TARGET=LUAJIT_ARCH_ARM64" ]
  }

  if (current_os == target_os) {
    if (current_os == "win") {
      defines += [ "LUAJIT_OS=LUAJIT_OS_WINDOWS" ]
    } else if (current_os == "linux") {
      defines += [ "LUAJIT_OS=LUAJIT_OS_LINUX" ]
    } else if (current_os == "mac") {
      defines += [ "LUAJIT_OS=LUAJIT_OS_OSX" ]
    } else {
      defines += [ "LUAJIT_OS=LUAJIT_OS_OTHER" ]
    }
  }

  if (current_cpu == "arm") {
    if (arm_float_abi == "soft" || arm_float_abi == "softfp") {
      defines += [
        "LJ_ABI_SOFTFP=1",
        "LJ_ARCH_HASFPU=0",
      ]
    } else {
      defines += [
        "LJ_ABI_SOFTFP=0",
        "LJ_ARCH_HASFPU=1",
      ]
    }
  }
}

# Translated from src/Makefile, do not change the seqeunce.
dasm_flags = []
if (target_cpu != "mips" && target_cpu != "ppc") {
  dasm_flags += ["-D", "ENDIAN_LE"]
} else {
  assert(false, "Unsupported cpu: " + target_cpu)
}
if (target_cpu == "x64" || target_cpu == "arm64") {
  dasm_flags += ["-D", "P64"]
}
dasm_flags += ["-D", "JIT"]
if (target_os != "console") {
  dasm_flags += ["-D", "FFI"]
}
if (target_cpu == "arm" || target_cpu == "arm64") {
  dasm_flags += ["-D", "DUALNUM"]
  if (!(arm_float_abi == "soft" || arm_float_abi == "softfp")) {
    dasm_flags += ["-D", "FPU"]
    dasm_flags += ["-D", "HFABI"]
  }
}
if (target_os == "ios") {
  dasm_flags += ["-D", "NO_UNWIND"]
}
if (target_cpu == "arm" || target_cpu == "arm64") {
  dasm_flags += ["-D", "VER=${arm_version}0"]
}
if (target_cpu == "x86") {
  dasm_flags += ["-D", "SSE"]
}
if (target_os == "ios") {
  dasm_flags += ["-D", "IOS"]
}

buildvm = "$root_out_dir/buildvm"
ljvm_bout = "$target_gen_dir/lj_vm.S"
ljvm_mode = "elfasm"
if (target_os == "win") {
  ljvm_bout = "$target_gen_dir/lj_vm.o"
  ljvm_mode = "peobj"
} else if (target_os == "mac" || target_os == "ios") {
  ljvm_mode = "machasm"
}
lj_bcdef_h = "$target_gen_dir/lj_bcdef.h"
lj_ffdef_h = "$target_gen_dir/lj_ffdef.h"
lj_libdef_h = "$target_gen_dir/lj_libdef.h"
lj_recdef_h = "$target_gen_dir/lj_recdef.h"
lj_folddef_h = "$target_gen_dir/lj_folddef.h"

# Keep the original order to generate the same bytecode.
ljlib_files = [
  "src/lib_base.c",
  "src/lib_math.c",
  "src/lib_bit.c",
  "src/lib_string.c",
  "src/lib_table.c",
  "src/lib_io.c",
  "src/lib_os.c",
  "src/lib_package.c",
  "src/lib_debug.c",
  "src/lib_jit.c",
  "src/lib_ffi.c",
]

config("luajit_excutable_config") {
  include_dirs = [ "src" ]
  if (target_os == "mac" && target_cpu == "x64") {
    ldflags = [ "-pagezero_size", "10000", "-image_base", "100000000" ]
  }
}

executable("lua51") {
  sources = [ "src/luajit.c" ]
  configs += [ ":luajit_config" ]
  deps = [ ":lua" ]
}

if (is_win) {
  executable("wlua51") {
    deps = [
      ":lua_shared",
      "//build/win:default_exe_manifest",
    ]
    configs += [ ":luajit_config" ]
    configs -= [ "//build/config/win:lean_and_mean" ]
  }
}

shared_library("lua_shared") {
  output_name = "lua51"
  deps = [ ":lua" ]
}

static_library("lua") {
  include_dirs = [ "$target_gen_dir" ]
  sources = ljlib_files + [
    ljvm_bout,
    lj_bcdef_h,
    lj_ffdef_h,
    lj_libdef_h,
    lj_recdef_h,
    lj_folddef_h,
    "src/lauxlib.h",
    "src/lib_aux.c",
    "src/lib_init.c",
    "src/lj_alloc.c",
    "src/lj_alloc.h",
    "src/lj_api.c",
    "src/lj_arch.h",
    "src/lj_asm.c",
    "src/lj_asm.h",
    "src/lj_asm_arm.h",
    "src/lj_asm_mips.h",
    "src/lj_asm_ppc.h",
    "src/lj_asm_x86.h",
    "src/lj_bc.c",
    "src/lj_bc.h",
    "src/lj_bcdump.h",
    "src/lj_bcread.c",
    "src/lj_bcwrite.c",
    "src/lj_buf.c",
    "src/lj_buf.h",
    "src/lj_carith.c",
    "src/lj_carith.h",
    "src/lj_ccall.c",
    "src/lj_ccall.h",
    "src/lj_ccallback.c",
    "src/lj_ccallback.h",
    "src/lj_cconv.c",
    "src/lj_cconv.h",
    "src/lj_cdata.c",
    "src/lj_cdata.h",
    "src/lj_char.c",
    "src/lj_char.h",
    "src/lj_clib.c",
    "src/lj_clib.h",
    "src/lj_cparse.c",
    "src/lj_cparse.h",
    "src/lj_crecord.c",
    "src/lj_crecord.h",
    "src/lj_ctype.c",
    "src/lj_ctype.h",
    "src/lj_debug.c",
    "src/lj_debug.h",
    "src/lj_def.h",
    "src/lj_dispatch.c",
    "src/lj_dispatch.h",
    "src/lj_emit_arm.h",
    "src/lj_emit_mips.h",
    "src/lj_emit_ppc.h",
    "src/lj_emit_x86.h",
    "src/lj_err.c",
    "src/lj_err.h",
    "src/lj_errmsg.h",
    "src/lj_ff.h",
    "src/lj_ffrecord.c",
    "src/lj_ffrecord.h",
    "src/lj_frame.h",
    "src/lj_func.c",
    "src/lj_func.h",
    "src/lj_gc.c",
    "src/lj_gc.h",
    "src/lj_gdbjit.c",
    "src/lj_gdbjit.h",
    "src/lj_ir.c",
    "src/lj_ir.h",
    "src/lj_ircall.h",
    "src/lj_iropt.h",
    "src/lj_jit.h",
    "src/lj_lex.c",
    "src/lj_lex.h",
    "src/lj_lib.c",
    "src/lj_lib.h",
    "src/lj_load.c",
    "src/lj_mcode.c",
    "src/lj_mcode.h",
    "src/lj_meta.c",
    "src/lj_meta.h",
    "src/lj_obj.c",
    "src/lj_obj.h",
    "src/lj_opt_dce.c",
    "src/lj_opt_fold.c",
    "src/lj_opt_loop.c",
    "src/lj_opt_mem.c",
    "src/lj_opt_narrow.c",
    "src/lj_opt_sink.c",
    "src/lj_opt_split.c",
    "src/lj_parse.c",
    "src/lj_parse.h",
    "src/lj_profile.c",
    "src/lj_profile.h",
    "src/lj_record.c",
    "src/lj_record.h",
    "src/lj_snap.c",
    "src/lj_snap.h",
    "src/lj_state.c",
    "src/lj_state.h",
    "src/lj_str.c",
    "src/lj_str.h",
    "src/lj_strfmt.c",
    "src/lj_strfmt.h",
    "src/lj_strfmt_num.c",
    "src/lj_strscan.c",
    "src/lj_strscan.h",
    "src/lj_tab.c",
    "src/lj_tab.h",
    "src/lj_target.h",
    "src/lj_target_arm.h",
    "src/lj_target_arm64.h",
    "src/lj_target_mips.h",
    "src/lj_target_ppc.h",
    "src/lj_target_x86.h",
    "src/lj_trace.c",
    "src/lj_trace.h",
    "src/lj_traceerr.h",
    "src/lj_udata.c",
    "src/lj_udata.h",
    "src/lj_vm.h",
    "src/lj_vmevent.c",
    "src/lj_vmevent.h",
    "src/lj_vmmath.c",
    "src/lua.h",
    "src/lua.hpp",
    "src/luaconf.h",
    "src/luajit.h",
    "src/lualib.h",
  ]
  cflags = [ "-Wno-varargs" ]

  configs += [ ":luajit_config" ]
  public_configs = [ ":luajit_excutable_config" ]
  if (!is_win) {
    configs -= [ "//build/config/gcc:symbol_visibility_hidden" ]
  }

  deps = [
    ":generate_ljvm_s",
    ":generate_lj_bcdef_h",
    ":generate_lj_ffdef_h",
    ":generate_lj_libdef_h",
    ":generate_lj_recdef_h",
    ":generate_lj_folddef_h",
    ":generate_vmdef_lua",
  ]
}

executable("minilua") {
  sources = [ "src/host/minilua.c" ]
  configs += [ ":luajit_config" ]
}

compiled_action("generate_buildvm_arch_h") {
  dasm_arch = target_cpu
  dasm_lua = "dynasm/dynasm.lua"
  dasm_asc = "src/vm_$dasm_arch.dasc"
  buildvm_arch_h = "$target_gen_dir/buildvm_arch.h"

  tool = ":minilua"
  inputs = [ dasm_lua ]
  outputs = [ buildvm_arch_h ]
  args = [ rebase_path(dasm_lua) ] + dasm_flags +
         ["-o", rebase_path(buildvm_arch_h), rebase_path(dasm_asc) ]
}

executable("buildvm") {
  include_dirs = [
    "src",
    "$target_gen_dir",
  ]
  sources = [
    "src/host/buildvm.c",
    "src/host/buildvm.h",
    "src/host/buildvm_asm.c",
    "src/host/buildvm_peobj.c",
    "src/host/buildvm_libbc.h",
    "src/host/buildvm_lib.c",
    "src/host/buildvm_fold.c",
  ]
  cflags = [ "-Wno-shift-overflow" ]

  configs += [ ":luajit_config" ]
  deps = [ ":generate_buildvm_arch_h" ]
}

template("buildvm_action") {
  compiled_action("${target_name}") {
    forward_variables_from(invoker, [ "deps", "inputs" ])
    if (!defined(inputs)) {
      inputs = []
    }

    tool = ":buildvm"
    outputs = [ invoker.output_file ]
    args = [ "-m", invoker.mode,
             "-o", rebase_path(invoker.output_file) ] + rebase_path(inputs)
  }
}

buildvm_action("generate_ljvm_s") {
  output_file = ljvm_bout
  mode = ljvm_mode
}

buildvm_action("generate_lj_bcdef_h") {
  inputs = ljlib_files
  output_file = lj_bcdef_h
  mode = "bcdef"
}

buildvm_action("generate_lj_ffdef_h") {
  inputs = ljlib_files
  output_file = lj_ffdef_h
  mode = "ffdef"
}

buildvm_action("generate_lj_libdef_h") {
  inputs = ljlib_files
  output_file = lj_libdef_h
  mode = "libdef"
}

buildvm_action("generate_lj_recdef_h") {
  inputs = ljlib_files
  output_file = lj_recdef_h
  mode = "recdef"
}

buildvm_action("generate_lj_folddef_h") {
  inputs = [ "src/lj_opt_fold.c" ]
  output_file = lj_folddef_h
  mode = "folddef"
}

buildvm_action("generate_vmdef_lua") {
  inputs = ljlib_files
  output_file = "$root_out_dir/vmdef.lua"
  mode = "vmdef"
}
